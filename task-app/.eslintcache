[{"C:\\SlashDB\\task-app\\src\\index.js":"1","C:\\SlashDB\\task-app\\src\\App.js":"2","C:\\SlashDB\\task-app\\src\\reportWebVitals.js":"3","C:\\SlashDB\\task-app\\src\\components\\Lists.js":"4","C:\\SlashDB\\task-app\\src\\components\\Header.js":"5","C:\\SlashDB\\task-app\\src\\components\\List.js":"6","C:\\SlashDB\\task-app\\src\\components\\Task.js":"7","C:\\SlashDB\\task-app\\src\\components\\NewListArea.js":"8","C:\\SlashDB\\task-app\\src\\slashDBwrapper.js":"9","C:\\SlashDB\\task-app\\src\\components\\Name.js":"10"},{"size":634,"mtime":1609360777248,"results":"11","hashOfConfig":"12"},{"size":1106,"mtime":1609362405142,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":447,"mtime":1609266464325,"results":"15","hashOfConfig":"12"},{"size":475,"mtime":1609102937483,"results":"16","hashOfConfig":"12"},{"size":3843,"mtime":1609308558937,"results":"17","hashOfConfig":"12"},{"size":2122,"mtime":1609308543754,"results":"18","hashOfConfig":"12"},{"size":1585,"mtime":1609361285777,"results":"19","hashOfConfig":"12"},{"size":3583,"mtime":1609362333865,"results":"20","hashOfConfig":"12"},{"size":394,"mtime":1609307955888,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"feyvwx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\SlashDB\\task-app\\src\\index.js",[],["46","47"],"C:\\SlashDB\\task-app\\src\\App.js",[],"C:\\SlashDB\\task-app\\src\\reportWebVitals.js",[],"C:\\SlashDB\\task-app\\src\\components\\Lists.js",[],"C:\\SlashDB\\task-app\\src\\components\\Header.js",[],"C:\\SlashDB\\task-app\\src\\components\\List.js",[],"C:\\SlashDB\\task-app\\src\\components\\Task.js",[],["48","49"],"C:\\SlashDB\\task-app\\src\\components\\NewListArea.js",["50"],"import React, { useState } from 'react';\r\nimport { fetchWrapper } from './../slashDBwrapper';\r\nimport { useQuery } from './../slashDBwrapper';\r\n\r\nexport default function NewListArea(props) {\r\n  const { getLists } = props;\r\n  const [listName, setListName] = useState('');\r\n\r\n  function postList(body) {\r\n    return fetchWrapper.post(`/TaskList`, body).then(() => getLists());\r\n  }\r\n\r\n  const wrapper = {\r\n    width: '100vw',\r\n    margin: 'auto',\r\n  };\r\n  const inputWrapper = {\r\n    width: '300px',\r\n    height: '25px',\r\n    margin: '20px auto',\r\n  };\r\n  const inputStyle = {\r\n    flexGrow: '2',\r\n    width: '70%',\r\n    height: '23px',\r\n    backgroundColor: 'rgba(92, 112, 122, 0.32)',\r\n    border: 'none',\r\n    borderRadius: '10px',\r\n    outline: 'none',\r\n    cursor: 'pointer',\r\n  };\r\n  const buttonWrapper = {\r\n    height: '25px',\r\n    float: 'right',\r\n    backgroundColor: '#00afef',\r\n    color: '#fff',\r\n    border: 'none',\r\n    borderRadius: '10px',\r\n    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.3)',\r\n    cursor: 'pointer',\r\n    outline: 'none',\r\n  };\r\n\r\n  return (\r\n    <div style={wrapper}>\r\n      <div style={inputWrapper}>\r\n        <input\r\n          style={inputStyle}\r\n          value={listName}\r\n          placeholder=\"New List...\"\r\n          onChange={(e) => setListName(e.target.value)}\r\n        />\r\n        <button\r\n          style={buttonWrapper}\r\n          onClick={() => {\r\n            postList({ Name: listName ? listName : 'New List' });\r\n            setListName('');\r\n          }}\r\n        >\r\n          Add list\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\SlashDB\\task-app\\src\\slashDBwrapper.js",["51"],"//Will need this later whe nwe turn the functions in to useGet, usePost.... hooks\r\n// import React, { createContext, useContext, useState, useCallback } from 'react';\r\n// export const SlashDBContext = createContext({});\r\n\r\n// export const SlashDBProvider = ({ baseUrl, children }) => (\r\n//   <SlashDBContext.Provider value={{ baseUrl }}>\r\n//     {children}\r\n//   </SlashDBContext.Provider>\r\n// );\r\n\r\n// const { baseUrl } = useContext(SlashDBContext);\r\n\r\nimport { useState, useEffect, createContext, useContext } from 'react';\r\n\r\nexport const SlashDBContext = createContext({});\r\n\r\nexport const SlashDBProvider = ({ baseUrl, children }) => (\r\n  <SlashDBContext.Provider value={{ baseUrl }}>\r\n    {children}\r\n  </SlashDBContext.Provider>\r\n);\r\n\r\nexport const fetchWrapper = {\r\n  setUp,\r\n  get,\r\n  post,\r\n  put,\r\n  delete: _delete,\r\n  query,\r\n  // useQuery,\r\n};\r\n\r\nlet basePath = '';\r\nlet dataBase = '';\r\nlet dataFormat = `.json`;\r\n\r\nfunction setUp(basepath, database, dataformat) {\r\n  basePath = basepath;\r\n  dataBase = database;\r\n  dataformat && (dataFormat = `.${dataformat}`);\r\n}\r\n\r\nasync function raw(httpMethod, url, body) {\r\n  const requestOptions = {\r\n    method: `${httpMethod}`,\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(body),\r\n  };\r\n  try {\r\n    return await fetch(\r\n      basePath + dataBase + url + dataFormat,\r\n      requestOptions\r\n    ).then(handleResponse);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nasync function get(url) {\r\n  //path, querryString - object, \r\n  return await raw('GET', url);\r\n}\r\n\r\nasync function post(url, body) {\r\n  return await raw('POST', url, body);\r\n}\r\n\r\nasync function put(url, body) {\r\n  return await raw('PUT', url, body);\r\n}\r\n\r\n// prefixed with underscored because delete is a reserved word in javascript\r\nasync function _delete(url) {\r\n  try {\r\n    return await raw('DELETE', url);\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n}\r\n\r\n// helper functions for response handling\r\nasync function handleResponse(response) {\r\n  return await response.text().then((text) => {\r\n    const data = text && JSON.parse(text);\r\n\r\n    if (!response.ok) {\r\n      const error = (data && data.message) || response.statusText;\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    return data;\r\n  });\r\n}\r\n\r\n/**\r\n * Component is described here.\r\n *\r\n * @query ./extra.examples.md\r\n */\r\nasync function query(fields, fct, body) {\r\n  let url = '';\r\n  fields.map((field) => {\r\n    return (url = url + '/' + field);\r\n  });\r\n  switch (fct) {\r\n    case 'get':\r\n      return await get(url);\r\n    case 'post':\r\n      return await post(url, body);\r\n    case 'put':\r\n      return await put(url, body);\r\n    case 'delete':\r\n      return await _delete(url);\r\n\r\n    default:\r\n      return await get(url);\r\n  }\r\n}\r\n\r\nexport function useQuery(fields, fct, body) {\r\n  const { baseUrl } = useContext(SlashDBContext);\r\n  console.log(baseUrl);\r\n  const [data, setData] = useState([]);\r\n  let url = '';\r\n\r\n  fields.map((field) => {\r\n    return (url = url + '/' + field);\r\n  });\r\n\r\n  useEffect(() => {\r\n    switch (fct) {\r\n      case 'get':\r\n        get(url).then((result) => setData(result));\r\n        break;\r\n      case 'post':\r\n        post(url, body).then((result) => setData(result));\r\n        break;\r\n      case 'put':\r\n        put(url, body).then((result) => setData(result));\r\n        break;\r\n      case 'delete':\r\n        _delete(url).then((result) => setData(result));\r\n        break;\r\n\r\n      default:\r\n        get(url).then((result) => setData(result));\r\n        break;\r\n    }\r\n  }, []);\r\n  return data;\r\n}\r\n","C:\\SlashDB\\task-app\\src\\components\\Name.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"52","replacedBy":"56"},{"ruleId":"54","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":3,"column":10,"nodeType":"60","messageId":"61","endLine":3,"endColumn":18},{"ruleId":"62","severity":1,"message":"63","line":149,"column":6,"nodeType":"64","endLine":149,"endColumn":8,"suggestions":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],["66"],["67"],"no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body', 'fct', and 'url'. Either include them or remove the dependency array.","ArrayExpression",["68"],"no-global-assign","no-unsafe-negation",{"desc":"69","fix":"70"},"Update the dependencies array to be: [body, fct, url]",{"range":"71","text":"72"},[3558,3560],"[body, fct, url]"]