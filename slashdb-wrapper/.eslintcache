[{"C:\\SlashDB\\slashdb-wrapper\\src\\index.js":"1","C:\\SlashDB\\slashdb-wrapper\\src\\App.js":"2","C:\\SlashDB\\slashdb-wrapper\\src\\slashdb.js":"3","C:\\SlashDB\\slashdb-wrapper\\src\\hooks.js":"4"},{"size":341,"mtime":1610020693238,"results":"5","hashOfConfig":"6"},{"size":1206,"mtime":1610135385646,"results":"7","hashOfConfig":"6"},{"size":4841,"mtime":1610108231266,"results":"8","hashOfConfig":"6"},{"size":2880,"mtime":1610108232383,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"gxl51e",{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\SlashDB\\slashdb-wrapper\\src\\index.js",[],["20","21"],"C:\\SlashDB\\slashdb-wrapper\\src\\App.js",["22","23"],"C:\\SlashDB\\slashdb-wrapper\\src\\slashdb.js",[],"C:\\SlashDB\\slashdb-wrapper\\src\\hooks.js",["24","25"],"import { useState, useEffect, createContext, useContext, useRef } from 'react';\r\nimport { slashDB } from './slashdb';\r\n\r\nexport const SlashDBContext = createContext({});\r\n\r\nexport const SlashDBProvider = ({ baseUrl, children }) => (\r\n  <SlashDBContext.Provider value={{ baseUrl }}>\r\n    {children}\r\n  </SlashDBContext.Provider>\r\n);\r\n\r\nexport const useDataDiscovery = (database, parameters, queryStrParameters) => {\r\n  const { baseUrl } = useContext(SlashDBContext);\r\n  slashDB.setUp(baseUrl);\r\n\r\n  const isMountedRef = useRef(null);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [didUpdate, setDidUpdate] = useState(new Date());\r\n\r\n  const _get = async (parameters, queryStrParameters, headers) => {\r\n    await slashDB\r\n      .dataDiscovery(\r\n        'get',\r\n        database,\r\n        parameters,\r\n        queryStrParameters,\r\n        undefined,\r\n        headers\r\n      )\r\n      .then((data) => setData(data));\r\n  };\r\n\r\n  const _post = async (parameters, body, queryStrParameters, headers) => {\r\n    await slashDB\r\n      .dataDiscovery(\r\n        'post',\r\n        database,\r\n        parameters,\r\n        queryStrParameters,\r\n        body,\r\n        headers\r\n      )\r\n      .then(setDidUpdate(new Date()));\r\n  };\r\n\r\n  const _put = async (parameters, body, queryStrParameters, headers) => {\r\n    await slashDB\r\n      .dataDiscovery(\r\n        'put',\r\n        database,\r\n        parameters,\r\n        queryStrParameters,\r\n        body,\r\n        headers\r\n      )\r\n      .then(setDidUpdate(new Date()));\r\n  };\r\n\r\n  const _delete = async (parameters, queryStrParameters, headers) => {\r\n    await slashDB\r\n      .dataDiscovery(\r\n        'delete',\r\n        database,\r\n        parameters,\r\n        queryStrParameters,\r\n        undefined,\r\n        headers\r\n      )\r\n      .then(setDidUpdate(new Date()));\r\n  };\r\n\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n    if (isMountedRef.current) {\r\n      _get(parameters, queryStrParameters);\r\n    }\r\n    return () => (isMountedRef.current = false);\r\n  }, [didUpdate]);\r\n\r\n  return [data, _get, _post, _put, _delete];\r\n};\r\n\r\nexport const useExecuteQuery = (queryID, parameters, queryStrParameters) => {\r\n  const { baseUrl } = useContext(SlashDBContext);\r\n  slashDB.setUp(baseUrl);\r\n\r\n  const isMountedRef = useRef(null);\r\n\r\n  const [data, setData] = useState([]);\r\n\r\n  const _executeQuery = async (\r\n    httpMethod,\r\n    parameters,\r\n    queryStrParameters,\r\n    headers\r\n  ) => {\r\n    await slashDB\r\n      .executeQuery(\r\n        httpMethod,\r\n        queryID,\r\n        parameters,\r\n        queryStrParameters,\r\n        headers\r\n      )\r\n      .then((data) => setData(data));\r\n  };\r\n\r\n  useEffect(() => {\r\n    isMountedRef.current = true;\r\n    if (isMountedRef.current) {\r\n      _executeQuery(parameters, queryStrParameters);\r\n    }\r\n    return () => (isMountedRef.current = false);\r\n  }, []);\r\n\r\n  return [data, _executeQuery];\r\n};\r\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":3,"column":10,"nodeType":"32","messageId":"33","endLine":3,"endColumn":17},{"ruleId":"34","severity":1,"message":"35","line":22,"column":6,"nodeType":"36","endLine":22,"endColumn":8,"suggestions":"37"},{"ruleId":"34","severity":1,"message":"38","line":79,"column":6,"nodeType":"36","endLine":79,"endColumn":17,"suggestions":"39"},{"ruleId":"34","severity":1,"message":"40","line":115,"column":6,"nodeType":"36","endLine":115,"endColumn":8,"suggestions":"41"},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'slashDB' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getDataUseDD'. Either include it or remove the dependency array.","ArrayExpression",["44"],"React Hook useEffect has missing dependencies: '_get', 'parameters', and 'queryStrParameters'. Either include them or remove the dependency array.",["45"],"React Hook useEffect has missing dependencies: '_executeQuery', 'parameters', and 'queryStrParameters'. Either include them or remove the dependency array.",["46"],"no-global-assign","no-unsafe-negation",{"desc":"47","fix":"48"},{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},"Update the dependencies array to be: [getDataUseDD]",{"range":"53","text":"54"},"Update the dependencies array to be: [_get, didUpdate, parameters, queryStrParameters]",{"range":"55","text":"56"},"Update the dependencies array to be: [_executeQuery, parameters, queryStrParameters]",{"range":"57","text":"58"},[563,565],"[getDataUseDD]",[2002,2013],"[_get, didUpdate, parameters, queryStrParameters]",[2835,2837],"[_executeQuery, parameters, queryStrParameters]"]